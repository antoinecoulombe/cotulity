# name: Node.js CI

# on:
#   push:
#     branches: [main, dev-antoine]

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     services:
#       db:
#         image: mariadb:10.2
#         ports:
#           - 3306:3306
#         env:
#           MYSQL_USER: ${{ secrets.DB_TEST_USER }}
#           MYSQL_PASSWORD: ${{ secrets.DB_TEST_PWD }}
#           MYSQL_DATABASE: ${{ secrets.DB_TEST }}
#           MYSQL_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PWD }}
#           DB_HOST: db
#         options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3

#     strategy:
#       matrix:
#         node-version: [14.x]

#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#       - name: Use Node.js v${{ matrix.node-version }}
#         uses: actions/setup-node@v2
#         with:
#           node-version: ${{ matrix.node-version }}
#       - name: Verify MariaDB connection
#         env:
#           PORT: ${{ job.services.db.ports[3306] }}
#         run: |
#           while ! mysqladmin ping -h"127.0.0.1" -P"$PORT" --silent; do
#             sleep 1
#           done
#       - name: GLOBAL - Install packages
#         working-directory: ./api/global
#         run: npm install
#       - name: GLOBAL - Run tests
#         working-directory: ./api/global
#         run: npm run dev:test
#         env:
#           DB_TEST: ${{ secrets.DB_TEST }}
#           DB_TEST_PWD: ${{ secrets.DB_TEST_PWD }}
#           DB_TEST_USER: ${{ secrets.DB_TEST_USER }}
#           JWT_SECRET: ${{ secrets.JWT_SECRET }}

# name: Node.js CI

# jobs:
#   on:
#     pull_request:
#     push:
#       branches: [main, dev-antoine]

#   test:
#     name: Run test suite
#     runs-on: ubuntu-latest
#     env:
#       DOCKER_USER: ${{ secrets.DOCKER_USER }}
#       DOCKER_PASS: ${{ secrets.DOCKER_PASS }}

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Login to DockerHub
#         run: docker login -u $DOCKER_USER -p $DOCKER_PASS

#       - name: Build docker images
#         run: docker-compose -f docker-compose-test.yml build
#         DB_TEST: ${{ secrets.DB_TEST }}
#         DB_TEST_PWD: ${{ secrets.DB_TEST_PWD }}
#         DB_TEST_USER: ${{ secrets.DB_TEST_USER }}
#         JWT_SECRET: ${{ secrets.JWT_SECRET }}
#         SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}

#       - name: Run tests
#         run: docker-compose -f docker-compose-test.yml up --abort-on-container-exit
#         DB_TEST: ${{ secrets.DB_TEST }}
#         DB_TEST_PWD: ${{ secrets.DB_TEST_PWD }}
#         DB_TEST_USER: ${{ secrets.DB_TEST_USER }}
#         JWT_SECRET: ${{ secrets.JWT_SECRET }}
#         SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
