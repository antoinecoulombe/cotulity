version: '3'

services:
  db:
    image: mariadb:10.2
    container_name: db
    restart: always
    ports:
      - 3306:3306
    expose:
      - 3306
    command:
      - mysqld
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --max_connections=200
      - --max_allowed_packet=256M
    volumes:
      - ./docker/provision/mysql/init:/docker-entrypoint-initdb.d
    networks:
      - backend
    env_file:
      - ./api/shared/.env
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '--silent']
      interval: 5s
      timeout: 3s
      retries: 10

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    ports:
      - 8080:80
    networks:
      - backend
    links:
      - db
    depends_on:
      - db
    environment:
      PMA_ARBITRARY: 1
      PMA_HOST: db
      PMA_PORT: 3306

  api_auth:
    build:
      context: api/
      dockerfile: auth/Dockerfile
    command: 'run start:test'
    container_name: api-auth
    restart: always
    ports:
      - 2999:2999
    expose:
      - 2999
    networks:
      - backend
    links:
      - db
    depends_on:
      - db
    environment:
      PORT: 2999
      DB_HOST: db
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://localhost:2999']
      interval: 5s
      timeout: 3s
      retries: 10

  api_global:
    build:
      context: api/
      dockerfile: global/Dockerfile
    command: 'run start:test'
    container_name: api-global
    restart: always
    ports:
      - 3000:3000
    expose:
      - 3000
    networks:
      - backend
    links:
      - db
    depends_on:
      - db
      - api_auth
    environment:
      PORT: 3000
      DB_HOST: db
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://localhost:3000']
      interval: 5s
      timeout: 3s
      retries: 10

  api_groceries:
    build:
      context: api/
      dockerfile: groceries/Dockerfile
    command: 'run start:test'
    container_name: api-groceries
    restart: always
    ports:
      - 3001:3001
    expose:
      - 3001
    networks:
      - backend
    links:
      - db
    depends_on:
      - db
      - api_auth
      - api_global
      - api_homes
    environment:
      PORT: 3001
      DB_HOST: db
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://localhost:3001']
      interval: 5s
      timeout: 3s
      retries: 10

  api_homes:
    build:
      context: api/
      dockerfile: homes/Dockerfile
    command: 'run start:test'
    container_name: api-homes
    restart: always
    ports:
      - 3002:3002
    expose:
      - 3002
    networks:
      - backend
    links:
      - db
    depends_on:
      - db
      - api_auth
      - api_global
    environment:
      PORT: 3002
      DB_HOST: db
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://localhost:3002']
      interval: 5s
      timeout: 3s
      retries: 10

  # api_tasks:
  #   build:
  #     context: api/
  #     dockerfile: tasks/Dockerfile
  #   command: 'run start:test'
  #   container_name: api-tasks
  #   restart: always
  #   ports:
  #     - 3003:3003
  #   expose:
  #     - 3003
  #   networks:
  #     - backend
  #   links:
  #     - db
  #   depends_on:
  #     - db
  #     - api_auth
  #     - api_global
  #     - api_homes
  #   environment:
  #     PORT: 3003
  #     DB_HOST: db
  #   healthcheck:
  #     test: ['CMD', 'curl', '--fail', 'http://localhost:3003']
  #     interval: 5s
  #     timeout: 3s
  #     retries: 10

  # api_accounts:
  #   build:
  #     context: api/
  #     dockerfile: accounts/Dockerfile
  #   command: 'run start:test'
  #   container_name: api-accounts
  #   restart: always
  #   ports:
  #     - 3004:3004
  #   expose:
  #     - 3004
  #   networks:
  #     - backend
  #   links:
  #     - db
  #   depends_on:
  #     - db
  #     - api_auth
  #     - api_global
  #     - api_homes
  #   environment:
  #     PORT: 3004
  #     DB_HOST: db
  #   healthcheck:
  #     test: ['CMD', 'curl', '--fail', 'http://localhost:3004']
  #     interval: 5s
  #     timeout: 3s
  #     retries: 10

  # api_calendar:
  #   build:
  #     context: api/
  #     dockerfile: calendar/Dockerfile
  #   command: 'run start:test'
  #   container_name: api-calendar
  #   restart: always
  #   ports:
  #     - 3005:3005
  #   expose:
  #     - 3005
  #   networks:
  #     - backend
  #   links:
  #     - db
  #   depends_on:
  #     - db
  #     - api_auth
  #     - api_global
  #     - api_homes
  #   environment:
  #     PORT: 3005
  #     DB_HOST: db
  #   healthcheck:
  #     test: ['CMD', 'curl', '--fail', 'http://localhost:3005']
  #     interval: 5s
  #     timeout: 3s
  #     retries: 10

  api_test:
    build:
      context: api/
      dockerfile: test/Dockerfile
    container_name: api-test
    ports:
      - 3099:3099
    expose:
      - 3099
    networks:
      - backend
    links:
      - db
    depends_on:
      db:
        condition: service_healthy
      api_auth:
        condition: service_healthy
      api_global:
        condition: service_healthy
      api_homes:
        condition: service_healthy
      # api_tasks:
      #   condition: service_healthy
      api_groceries:
        condition: service_healthy
      # api_calendar:
      #   condition: service_healthy
      # api_accounts:
      #   condition: service_healthy
    environment:
      PORT: 3099
      DB_HOST: db

volumes:
  db:
    driver: local

networks:
  backend:
    driver: bridge
